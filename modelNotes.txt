
0.9347 - validation acc
model = keras.Sequential([
    layers.Conv1D(32, kernel_size=4, activation='relu', input_shape=input_shape),
    layers.MaxPooling1D(pool_size=2),
    layers.Conv1D(64, kernel_size=4, activation='relu'),
    # layers.Dropout(0.1),
    layers.MaxPooling1D(pool_size=5),
    layers.Conv1D(128, kernel_size=4, activation='relu'),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Two output neurons for two classes
])

0.94 - validation acc
# Define the input shape (256x4)
input_shape = (256, 4) 

# Build the CNN model
model = keras.Sequential([
    layers.Conv1D(32, kernel_size=5, activation='relu', input_shape=input_shape),
    layers.MaxPooling1D(pool_size=2),
    layers.Conv1D(64, kernel_size=5, activation='relu'),
    layers.MaxPooling1D(pool_size=2),
    layers.Conv1D(128, kernel_size=5, activation='relu'),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Two output neurons for two classes
])

# Tried and tested
layers.Conv1D(32, kernel_size=5, activation='relu', input_shape=input_shape),
layers.Dropout(0.4),
layers.MaxPooling1D(pool_size=2),
layers.Conv1D(64, kernel_size=5, activation='relu'),#, kernel_regularizer=regularizers.l2(0.003)),
layers.Dropout(0.3),
layers.MaxPooling1D(pool_size=2),
layers.Conv1D(128, kernel_size=5, activation='relu'),#, kernel_regularizer=regularizers.l2(0.003)),
layers.Dropout(0.3),
layers.MaxPooling1D(pool_size=2),
layers.Conv1D(256, kernel_size=5, activation='relu'),#, kernel_regularizer=regularizers.l2(0.003)),
layers.Dropout(0.2),
layers.Flatten(),
layers.Dense(128, activation='relu'),
layers.Dense(3, activation='softmax')  # Two output neurons for two classes